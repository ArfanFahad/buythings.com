// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/*
1. User
2. Address 
3. Order 
4. OrderItem 
5. Product 
6. Category 
7. Review 
8. Cart 
9. CartItem 
*/

// User Table 
model User {
  id         String    @id @default(uuid())
  name       String
  email      String    @unique
  password   String
  role       Role      @default(CUSTOMER)
  phone      String?   @unique
  profilePic String?
  address    Address[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relations 
  orders  Order[]
  reviews Review[]
  cart    Cart?

  @@map("users")
}

model Address {
  id         String  @id @default(uuid())
  user       User    @relation(fields: [userId], references: [id])
  userId     String
  line1      String
  line2      String?
  city       String
  postalCode String
  country    String

  @@index([userId])
  @@map("addresses")
}

// Order Table 
model Order {
  id              String      @id @default(uuid())
  user            User        @relation(fields: [userId], references: [id])
  userId          String
  items           OrderItem[]
  totalAmount     Float
  status          OrderStatus @default(PENDING)
  paymentType     PaymentType
  shippingAddress String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([userId])
  @@map("orders")
}

// OrderItem Table 
model OrderItem {
  id        String  @id @default(uuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

// Product Table 
model Product {
  id          String    @id @default(uuid())
  name        String
  description String
  price       Float
  stock       Int
  imageUrl    String
  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  reviews    Review[]
  orderItems OrderItem[]
  cartItems  CartItem[]

  @@index([categoryId])
  @@map("products")
}

// Category Table 
model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]

  @@map("categories")
}

// Review Table 
model Review {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  rating    Int // 1 to 5 
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([productId])
  @@map("reviews")
}

// Cart Table 
model Cart {
  id     String     @id @default(uuid())
  user   User       @relation(fields: [userId], references: [id])
  userId String     @unique
  items  CartItem[]

  @@map("cart")
}

// CartItem Table 
model CartItem {
  id        String  @id @default(uuid())
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int

  @@index([productId])
  @@index([cartId])
  @@map("cart_item")
}

enum Role {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentType {
  CASH
  CARD
  ONLINE
}